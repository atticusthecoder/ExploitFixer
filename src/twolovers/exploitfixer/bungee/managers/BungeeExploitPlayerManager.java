package twolovers.exploitfixer.bungee.managers;

import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import twolovers.exploitfixer.bungee.instanceables.BungeeExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class BungeeExploitPlayerManager implements ExploitPlayerManager {
	final private ModuleManager moduleManager;
	final private Map<String, ExploitPlayer> exploitPlayers = new HashMap<>();
	private int punishments = 0;

	BungeeExploitPlayerManager(final ModuleManager moduleManager) {
		this.moduleManager = moduleManager;

		for (final ProxiedPlayer proxiedPlayer : BungeeCord.getInstance().getPlayers())
			addPlayer(proxiedPlayer.getName());
	}

	@Override
	public ExploitPlayer getPlayer(final String playerName) {
		return exploitPlayers.getOrDefault(playerName, null);
	}

	@Override
	public void addPlayer(final String playerName) {
		if (getPlayer(playerName) == null)
			exploitPlayers.put(playerName, new BungeeExploitPlayer(playerName, moduleManager));
	}

	@Override
	public void reload() {
		final Iterator<String> iterator = exploitPlayers.keySet().iterator();
		boolean hasRemoved = false;

		while (iterator.hasNext()) {
			final String playerName = iterator.next();
			final ProxiedPlayer player = BungeeCord.getInstance().getPlayer(playerName);

			if (player == null || !player.isConnected()) {
				iterator.remove();

				if (!hasRemoved) {
					System.out.println("[ExploitFixer] Cleared unused cached players!");
					hasRemoved = true;
				}
			}
		}

		punishments = 0;
	}

	@Override
	public Collection<ExploitPlayer> getExploitPlayers() {
		return exploitPlayers.values();
	}

	@Override
	public int getPunishments() {
		return punishments;
	}

	@Override
	public void addPunishment() {
		punishments++;
	}

	@Override
	public void removePlayer(final String name) {
		exploitPlayers.remove(name);
	}
}
