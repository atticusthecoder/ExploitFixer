package twolovers.exploitfixer.bungee.listeners;

import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PostLoginEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.event.EventHandler;
import net.md_5.bungee.event.EventPriority;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.NotificationsModule;
import twolovers.exploitfixer.interfaces.modules.UUIDSpoofModule;

import java.util.UUID;

public class PostLoginListener implements Listener {
	final private Plugin plugin;
	final private UUIDSpoofModule uuidSpoofModule;
	final private NotificationsModule notificationsModule;
	final private ExploitPlayerManager exploitPlayerManager;

	public PostLoginListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.uuidSpoofModule = moduleManager.getUUIDSpoofModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler(priority = EventPriority.LOWEST)
	public void onPostLogin(final PostLoginEvent event) {
		final ProxiedPlayer proxiedPlayer = event.getPlayer();

		exploitPlayerManager.addPlayer(proxiedPlayer.getName());

		if (uuidSpoofModule.isEnabled()) {
			plugin.getProxy().getScheduler().runAsync(plugin, () -> {
				final String originalUUID = proxiedPlayer.getUniqueId().toString().replace("-", "");
				final String offlineUUID = UUID.nameUUIDFromBytes(("OfflinePlayer:" + proxiedPlayer.getName()).getBytes()).toString().replace("-", "");

				if (!originalUUID.contains(offlineUUID)) {
					final ExploitPlayer exploitPlayer = exploitPlayerManager.getPlayer(proxiedPlayer.getName());
					final String onlineUUID = exploitPlayer.getOnlineUUID();

					if (onlineUUID != null && !onlineUUID.contains(originalUUID))
						exploitPlayer.punish(plugin, uuidSpoofModule, proxiedPlayer);
				}
			});
		}

		if (proxiedPlayer.hasPermission("exploitfixer.notifications")) {
			notificationsModule.setNotifications(proxiedPlayer, true);
		}
	}
}