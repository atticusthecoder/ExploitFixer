package twolovers.exploitfixer.bungee.listeners;

import com.google.common.base.Charsets;
import net.md_5.bungee.api.connection.Connection;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PluginMessageEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.event.EventHandler;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.CustomPayloadModule;
import twolovers.exploitfixer.shared.enums.Identity;

public class PluginMessageListener implements Listener {
	final private Plugin plugin;
	final private CustomPayloadModule customPayloadModule;
	final private ExploitPlayerManager exploitPlayerManager;

	public PluginMessageListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.customPayloadModule = moduleManager.getCustomPayloadModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler(priority = -128)
	public void onPluginMessage(final PluginMessageEvent event) {
		final Connection connection = event.getSender();

		if (customPayloadModule.isEnabled() && connection instanceof ProxiedPlayer) {
			final ProxiedPlayer proxiedPlayer = (ProxiedPlayer) connection;
			final String proxiedPlayerName = proxiedPlayer.getName();
			final ExploitPlayer exploitPlayer = exploitPlayerManager.getPlayer(proxiedPlayerName);
			final String tag = event.getTag();
			final byte[] data = event.getData();
			final String dataString = new String(data, Charsets.UTF_8);
			final int dataSize = dataString.split("[\u0001-\u0009]").length;

			if (exploitPlayer != null) {
				if (tag == null) {
					event.setCancelled(true);
				} else if (dataSize > 16384) {
					exploitPlayer.punish(plugin, customPayloadModule, proxiedPlayer);
					event.setCancelled(true);
				} else if (tag.equals("MC|BSign") || tag.equals("MC|BEdit") || tag.equals("MC|BOpen")) {
					exploitPlayer.addViolation(Identity.CUSTOM_PAYLOAD);

					final int violations = exploitPlayer.getViolations(Identity.CUSTOM_PAYLOAD);

					if (violations == customPayloadModule.getLimit()) {
						exploitPlayer.punish(plugin, customPayloadModule, proxiedPlayer);
						event.setCancelled(true);
					} else if (violations > customPayloadModule.getLimit())
						event.setCancelled(true);
				} else if (tag.equals("REGISTER")) {
					exploitPlayer.addChannels(dataSize);

					final int channels = exploitPlayer.getChannels();

					if (channels == 256) {
						exploitPlayer.punish(plugin, customPayloadModule, proxiedPlayer);
						event.setCancelled(true);
					} else if (channels > 256) {
						event.setCancelled(true);
					}
				} else {
					exploitPlayer.addViolation(Identity.CUSTOM_PAYLOAD_OTHER);

					final int violations = exploitPlayer.getViolations(Identity.CUSTOM_PAYLOAD_OTHER);

					if (violations == customPayloadModule.getOtherLimit()) {
						exploitPlayer.punish(plugin, customPayloadModule, proxiedPlayer);
						event.setCancelled(true);
					} else if (violations > customPayloadModule.getOtherLimit())
						event.setCancelled(true);
				}
			}
		}
	}
}

