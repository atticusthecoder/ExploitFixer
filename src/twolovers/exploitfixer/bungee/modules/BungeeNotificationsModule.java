package twolovers.exploitfixer.bungee.modules;

import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.config.Configuration;
import twolovers.exploitfixer.interfaces.modules.NotificationsModule;

import java.util.Collection;
import java.util.HashSet;

public class BungeeNotificationsModule implements NotificationsModule {
	private final Collection<Object> notifications = new HashSet<>();
	private boolean enabled;
	private String message;

	public BungeeNotificationsModule(final Object configYml) {
		reload(configYml);
	}

	@Override
	public final void setNotifications(final Object player, final boolean input) {
		if (input)
			notifications.add(player);
		else
			notifications.remove(player);
	}

	@Override
	public final boolean isNotifications(final Object player) {
		return notifications.contains(player);
	}

	@Override
	public void sendNotification(final String check, final Object player) {
		if (enabled && player != null) {
			final ProxiedPlayer player1 = (ProxiedPlayer) player;
			final TextComponent notification = new TextComponent(message
					.replace("%player%", player1.getName())
					.replace("%check%", check)
					.replace("%ping%", String.valueOf(player1.getPing())));

			BungeeCord.getInstance().getConsole().sendMessage(notification);

			for (final Object proxiedPlayer1 : getNotifications())
				((ProxiedPlayer) proxiedPlayer1).sendMessage(notification);
		}
	}

	@Override
	public final Collection<Object> getNotifications() {
		return notifications;
	}

	@Override
	public void reload(Object configYml) {
		final Configuration configYml1 = (Configuration) configYml;

		enabled = configYml1.getBoolean("notifications.enabled");
		message = configYml1.getString("notifications.message").replace("&", "\u00A7");
	}
}
