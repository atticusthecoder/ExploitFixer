package twolovers.exploitfixer.bukkit.adapters;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import io.netty.buffer.ByteBuf;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.CustomPayloadModule;
import twolovers.exploitfixer.interfaces.modules.MessagesModule;
import twolovers.exploitfixer.shared.enums.Identity;

import java.util.List;

public class CustomPayloadPacketAdapter extends PacketAdapter {
	private final CustomPayloadModule customPayloadModule;
	private final ExploitPlayerManager exploitPlayerManager;
	private final MessagesModule messagesModule;
	private final boolean isOneDotSeven;

	public CustomPayloadPacketAdapter(final Plugin plugin, final ModuleManager moduleManager) {
		super(plugin, PacketType.Play.Client.CUSTOM_PAYLOAD);
		this.customPayloadModule = moduleManager.getCustomPayloadModule();
		this.messagesModule = moduleManager.getMessagesModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.isOneDotSeven = plugin.getServer().getVersion().contains("1.7");
	}

	@Override
	public void onPacketReceiving(final PacketEvent event) {
		if (!event.isCancelled() && customPayloadModule.isEnabled()) {
			final PacketContainer packetContainer = event.getPacket();
			String tag = "";
			final Player player = event.getPlayer();
			final ExploitPlayer exploitPlayer = exploitPlayerManager.getPlayer(player.getName());

			if (exploitPlayer != null) {
				int size = 0;
				final List<Object> values = packetContainer.getModifier().getValues();

				if (values.size() > 1) {
					tag = String.valueOf(values.get(0));

					final Object object = values.get(1);

					if (!isOneDotSeven && object instanceof ByteBuf)
						size = ((ByteBuf) object).capacity();
				}

				if (tag == null)
					event.setCancelled(true);
				else if (size > 16384) {
					exploitPlayer.punish(plugin, customPayloadModule, player);
					event.setCancelled(true);
				} else if (tag.equals("MC|BSign") || tag.equals("MC|BEdit") || tag.equals("MC|BOpen")) {
					exploitPlayer.addViolation(Identity.CUSTOM_PAYLOAD);

					final int violations = exploitPlayer.getViolations(Identity.CUSTOM_PAYLOAD);

					if (violations == customPayloadModule.getLimit()) {
						exploitPlayer.punish(plugin, customPayloadModule, player);
						event.setCancelled(true);
					} else if (violations > customPayloadModule.getLimit())
						event.setCancelled(true);
				} else if (tag.equals("REGISTER")) {
					exploitPlayer.addChannels(size);

					final int channels = exploitPlayer.getChannels();

					if (channels == 256) {
						exploitPlayer.punish(plugin, customPayloadModule, player);
						event.setCancelled(true);
					} else if (channels > 256)
						event.setCancelled(true);
				} else {
					exploitPlayer.addViolation(Identity.CUSTOM_PAYLOAD_OTHER);

					final int violations = exploitPlayer.getViolations(Identity.CUSTOM_PAYLOAD_OTHER);

					if (violations == customPayloadModule.getOtherLimit()) {
						exploitPlayer.punish(plugin, customPayloadModule, player);
						event.setCancelled(true);
					} else if (violations > customPayloadModule.getOtherLimit())
						event.setCancelled(true);
				}
			}
		}
	}
}